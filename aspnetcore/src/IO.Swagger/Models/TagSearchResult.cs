/*
 * Digitalization of Asset Counting Web Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class TagSearchResult : IEquatable<TagSearchResult>
    { 
        /// <summary>
        /// Gets or Sets ValidAssets
        /// </summary>
        [DataMember(Name="validAssets")]
        public List<TagSearchAsset> ValidAssets { get; set; }

        /// <summary>
        /// Gets or Sets InvalidAssets
        /// </summary>
        [DataMember(Name="invalidAssets")]
        public List<TagSearchAsset> InvalidAssets { get; set; }

        /// <summary>
        /// Gets or Sets RemainingTags
        /// </summary>
        [DataMember(Name="remainingTags")]
        public List<TagValidation> RemainingTags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TagSearchResult {\n");
            sb.Append("  ValidAssets: ").Append(ValidAssets).Append("\n");
            sb.Append("  InvalidAssets: ").Append(InvalidAssets).Append("\n");
            sb.Append("  RemainingTags: ").Append(RemainingTags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TagSearchResult)obj);
        }

        /// <summary>
        /// Returns true if TagSearchResult instances are equal
        /// </summary>
        /// <param name="other">Instance of TagSearchResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TagSearchResult other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ValidAssets == other.ValidAssets ||
                    ValidAssets != null &&
                    ValidAssets.SequenceEqual(other.ValidAssets)
                ) && 
                (
                    InvalidAssets == other.InvalidAssets ||
                    InvalidAssets != null &&
                    InvalidAssets.SequenceEqual(other.InvalidAssets)
                ) && 
                (
                    RemainingTags == other.RemainingTags ||
                    RemainingTags != null &&
                    RemainingTags.SequenceEqual(other.RemainingTags)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ValidAssets != null)
                    hashCode = hashCode * 59 + ValidAssets.GetHashCode();
                    if (InvalidAssets != null)
                    hashCode = hashCode * 59 + InvalidAssets.GetHashCode();
                    if (RemainingTags != null)
                    hashCode = hashCode * 59 + RemainingTags.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TagSearchResult left, TagSearchResult right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TagSearchResult left, TagSearchResult right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
