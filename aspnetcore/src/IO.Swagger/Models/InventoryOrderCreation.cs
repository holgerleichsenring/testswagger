/*
 * Digitalization of Asset Counting Web Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InventoryOrderCreation : IEquatable<InventoryOrderCreation>
    { 
        /// <summary>
        /// Gets or Sets HasOnlyUntaggedAssets
        /// </summary>
        [DataMember(Name="hasOnlyUntaggedAssets")]
        public bool? HasOnlyUntaggedAssets { get; set; }

        /// <summary>
        /// Gets or Sets InventoryVariantName
        /// </summary>
        [DataMember(Name="inventoryVariantName")]
        public string InventoryVariantName { get; set; }

        /// <summary>
        /// Gets or Sets ReportDate
        /// </summary>
        [DataMember(Name="reportDate")]
        public DateTime? ReportDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InventoryOrderCreation {\n");
            sb.Append("  HasOnlyUntaggedAssets: ").Append(HasOnlyUntaggedAssets).Append("\n");
            sb.Append("  InventoryVariantName: ").Append(InventoryVariantName).Append("\n");
            sb.Append("  ReportDate: ").Append(ReportDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InventoryOrderCreation)obj);
        }

        /// <summary>
        /// Returns true if InventoryOrderCreation instances are equal
        /// </summary>
        /// <param name="other">Instance of InventoryOrderCreation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InventoryOrderCreation other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    HasOnlyUntaggedAssets == other.HasOnlyUntaggedAssets ||
                    HasOnlyUntaggedAssets != null &&
                    HasOnlyUntaggedAssets.Equals(other.HasOnlyUntaggedAssets)
                ) && 
                (
                    InventoryVariantName == other.InventoryVariantName ||
                    InventoryVariantName != null &&
                    InventoryVariantName.Equals(other.InventoryVariantName)
                ) && 
                (
                    ReportDate == other.ReportDate ||
                    ReportDate != null &&
                    ReportDate.Equals(other.ReportDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (HasOnlyUntaggedAssets != null)
                    hashCode = hashCode * 59 + HasOnlyUntaggedAssets.GetHashCode();
                    if (InventoryVariantName != null)
                    hashCode = hashCode * 59 + InventoryVariantName.GetHashCode();
                    if (ReportDate != null)
                    hashCode = hashCode * 59 + ReportDate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InventoryOrderCreation left, InventoryOrderCreation right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InventoryOrderCreation left, InventoryOrderCreation right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
