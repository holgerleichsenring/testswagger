/*
 * Digitalization of Asset Counting Web Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SapInventoryVariant : IEquatable<SapInventoryVariant>
    { 
        /// <summary>
        /// Gets or Sets InventoryVariantName
        /// </summary>
        [DataMember(Name="inventoryVariantName")]
        public string InventoryVariantName { get; set; }

        /// <summary>
        /// Gets or Sets ColumnName
        /// </summary>
        [DataMember(Name="columnName")]
        public string ColumnName { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value")]
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets ValueRange
        /// </summary>
        [DataMember(Name="valueRange")]
        public string ValueRange { get; set; }

        /// <summary>
        /// Gets or Sets Operator
        /// </summary>
        [DataMember(Name="operator")]
        public string Operator { get; set; }

        /// <summary>
        /// Gets or Sets IncludeExclude
        /// </summary>
        [DataMember(Name="includeExclude")]
        public string IncludeExclude { get; set; }

        /// <summary>
        /// Gets or Sets SourceSystem
        /// </summary>
        [DataMember(Name="sourceSystem")]
        public string SourceSystem { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SapInventoryVariant {\n");
            sb.Append("  InventoryVariantName: ").Append(InventoryVariantName).Append("\n");
            sb.Append("  ColumnName: ").Append(ColumnName).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  ValueRange: ").Append(ValueRange).Append("\n");
            sb.Append("  Operator: ").Append(Operator).Append("\n");
            sb.Append("  IncludeExclude: ").Append(IncludeExclude).Append("\n");
            sb.Append("  SourceSystem: ").Append(SourceSystem).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SapInventoryVariant)obj);
        }

        /// <summary>
        /// Returns true if SapInventoryVariant instances are equal
        /// </summary>
        /// <param name="other">Instance of SapInventoryVariant to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SapInventoryVariant other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    InventoryVariantName == other.InventoryVariantName ||
                    InventoryVariantName != null &&
                    InventoryVariantName.Equals(other.InventoryVariantName)
                ) && 
                (
                    ColumnName == other.ColumnName ||
                    ColumnName != null &&
                    ColumnName.Equals(other.ColumnName)
                ) && 
                (
                    Value == other.Value ||
                    Value != null &&
                    Value.Equals(other.Value)
                ) && 
                (
                    ValueRange == other.ValueRange ||
                    ValueRange != null &&
                    ValueRange.Equals(other.ValueRange)
                ) && 
                (
                    Operator == other.Operator ||
                    Operator != null &&
                    Operator.Equals(other.Operator)
                ) && 
                (
                    IncludeExclude == other.IncludeExclude ||
                    IncludeExclude != null &&
                    IncludeExclude.Equals(other.IncludeExclude)
                ) && 
                (
                    SourceSystem == other.SourceSystem ||
                    SourceSystem != null &&
                    SourceSystem.Equals(other.SourceSystem)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (InventoryVariantName != null)
                    hashCode = hashCode * 59 + InventoryVariantName.GetHashCode();
                    if (ColumnName != null)
                    hashCode = hashCode * 59 + ColumnName.GetHashCode();
                    if (Value != null)
                    hashCode = hashCode * 59 + Value.GetHashCode();
                    if (ValueRange != null)
                    hashCode = hashCode * 59 + ValueRange.GetHashCode();
                    if (Operator != null)
                    hashCode = hashCode * 59 + Operator.GetHashCode();
                    if (IncludeExclude != null)
                    hashCode = hashCode * 59 + IncludeExclude.GetHashCode();
                    if (SourceSystem != null)
                    hashCode = hashCode * 59 + SourceSystem.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SapInventoryVariant left, SapInventoryVariant right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SapInventoryVariant left, SapInventoryVariant right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
