/*
 * Digitalization of Asset Counting Web Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InventoryOrderStatistic : IEquatable<InventoryOrderStatistic>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [DataMember(Name="total")]
        public int? Total { get; set; }

        /// <summary>
        /// Gets or Sets Default
        /// </summary>
        [DataMember(Name="default")]
        public int? Default { get; set; }

        /// <summary>
        /// Gets or Sets Missed
        /// </summary>
        [DataMember(Name="missed")]
        public int? Missed { get; set; }

        /// <summary>
        /// Gets or Sets Broken
        /// </summary>
        [DataMember(Name="broken")]
        public int? Broken { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="active")]
        public int? Active { get; set; }

        /// <summary>
        /// Gets or Sets Remaining
        /// </summary>
        [DataMember(Name="remaining")]
        public int? Remaining { get; set; }

        /// <summary>
        /// Gets or Sets Research
        /// </summary>
        [DataMember(Name="research")]
        public int? Research { get; set; }

        /// <summary>
        /// Gets or Sets Transferred
        /// </summary>
        [DataMember(Name="transferred")]
        public int? Transferred { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InventoryOrderStatistic {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Default: ").Append(Default).Append("\n");
            sb.Append("  Missed: ").Append(Missed).Append("\n");
            sb.Append("  Broken: ").Append(Broken).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Remaining: ").Append(Remaining).Append("\n");
            sb.Append("  Research: ").Append(Research).Append("\n");
            sb.Append("  Transferred: ").Append(Transferred).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InventoryOrderStatistic)obj);
        }

        /// <summary>
        /// Returns true if InventoryOrderStatistic instances are equal
        /// </summary>
        /// <param name="other">Instance of InventoryOrderStatistic to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InventoryOrderStatistic other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Total == other.Total ||
                    Total != null &&
                    Total.Equals(other.Total)
                ) && 
                (
                    Default == other.Default ||
                    Default != null &&
                    Default.Equals(other.Default)
                ) && 
                (
                    Missed == other.Missed ||
                    Missed != null &&
                    Missed.Equals(other.Missed)
                ) && 
                (
                    Broken == other.Broken ||
                    Broken != null &&
                    Broken.Equals(other.Broken)
                ) && 
                (
                    Active == other.Active ||
                    Active != null &&
                    Active.Equals(other.Active)
                ) && 
                (
                    Remaining == other.Remaining ||
                    Remaining != null &&
                    Remaining.Equals(other.Remaining)
                ) && 
                (
                    Research == other.Research ||
                    Research != null &&
                    Research.Equals(other.Research)
                ) && 
                (
                    Transferred == other.Transferred ||
                    Transferred != null &&
                    Transferred.Equals(other.Transferred)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Total != null)
                    hashCode = hashCode * 59 + Total.GetHashCode();
                    if (Default != null)
                    hashCode = hashCode * 59 + Default.GetHashCode();
                    if (Missed != null)
                    hashCode = hashCode * 59 + Missed.GetHashCode();
                    if (Broken != null)
                    hashCode = hashCode * 59 + Broken.GetHashCode();
                    if (Active != null)
                    hashCode = hashCode * 59 + Active.GetHashCode();
                    if (Remaining != null)
                    hashCode = hashCode * 59 + Remaining.GetHashCode();
                    if (Research != null)
                    hashCode = hashCode * 59 + Research.GetHashCode();
                    if (Transferred != null)
                    hashCode = hashCode * 59 + Transferred.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InventoryOrderStatistic left, InventoryOrderStatistic right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InventoryOrderStatistic left, InventoryOrderStatistic right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
