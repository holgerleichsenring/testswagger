/*
 * Digitalization of Asset Counting Web Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InventoryOrderAssetResource : IEquatable<InventoryOrderAssetResource>
    { 
        /// <summary>
        /// Gets or Sets InventoryOrderId
        /// </summary>
        [DataMember(Name="inventoryOrderId")]
        public int? InventoryOrderId { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum _0Enum for 0
            /// </summary>
            
            _0Enum = 0,
            
            /// <summary>
            /// Enum _1Enum for 1
            /// </summary>
            
            _1Enum = 1,
            
            /// <summary>
            /// Enum _2Enum for 2
            /// </summary>
            
            _2Enum = 2,
            
            /// <summary>
            /// Enum _3Enum for 3
            /// </summary>
            
            _3Enum = 3,
            
            /// <summary>
            /// Enum _4Enum for 4
            /// </summary>
            
            _4Enum = 4,
            
            /// <summary>
            /// Enum _5Enum for 5
            /// </summary>
            
            _5Enum = 5
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status")]
        public StatusEnum? Status { get; set; }

        /// <summary>
        /// Gets or Sets Checked
        /// </summary>
        [DataMember(Name="checked")]
        public bool? Checked { get; set; }

        /// <summary>
        /// Gets or Sets CommentOther
        /// </summary>
        [DataMember(Name="commentOther")]
        public string CommentOther { get; set; }

        /// <summary>
        /// Gets or Sets CommentCostCenter
        /// </summary>
        [DataMember(Name="commentCostCenter")]
        public string CommentCostCenter { get; set; }

        /// <summary>
        /// Gets or Sets CommentPlant
        /// </summary>
        [DataMember(Name="commentPlant")]
        public string CommentPlant { get; set; }

        /// <summary>
        /// Gets or Sets CommentLocation
        /// </summary>
        [DataMember(Name="commentLocation")]
        public string CommentLocation { get; set; }

        /// <summary>
        /// Gets or Sets Asset
        /// </summary>
        [DataMember(Name="asset")]
        public AssetResource Asset { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InventoryOrderAssetResource {\n");
            sb.Append("  InventoryOrderId: ").Append(InventoryOrderId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Checked: ").Append(Checked).Append("\n");
            sb.Append("  CommentOther: ").Append(CommentOther).Append("\n");
            sb.Append("  CommentCostCenter: ").Append(CommentCostCenter).Append("\n");
            sb.Append("  CommentPlant: ").Append(CommentPlant).Append("\n");
            sb.Append("  CommentLocation: ").Append(CommentLocation).Append("\n");
            sb.Append("  Asset: ").Append(Asset).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InventoryOrderAssetResource)obj);
        }

        /// <summary>
        /// Returns true if InventoryOrderAssetResource instances are equal
        /// </summary>
        /// <param name="other">Instance of InventoryOrderAssetResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InventoryOrderAssetResource other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    InventoryOrderId == other.InventoryOrderId ||
                    InventoryOrderId != null &&
                    InventoryOrderId.Equals(other.InventoryOrderId)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    Checked == other.Checked ||
                    Checked != null &&
                    Checked.Equals(other.Checked)
                ) && 
                (
                    CommentOther == other.CommentOther ||
                    CommentOther != null &&
                    CommentOther.Equals(other.CommentOther)
                ) && 
                (
                    CommentCostCenter == other.CommentCostCenter ||
                    CommentCostCenter != null &&
                    CommentCostCenter.Equals(other.CommentCostCenter)
                ) && 
                (
                    CommentPlant == other.CommentPlant ||
                    CommentPlant != null &&
                    CommentPlant.Equals(other.CommentPlant)
                ) && 
                (
                    CommentLocation == other.CommentLocation ||
                    CommentLocation != null &&
                    CommentLocation.Equals(other.CommentLocation)
                ) && 
                (
                    Asset == other.Asset ||
                    Asset != null &&
                    Asset.Equals(other.Asset)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (InventoryOrderId != null)
                    hashCode = hashCode * 59 + InventoryOrderId.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Checked != null)
                    hashCode = hashCode * 59 + Checked.GetHashCode();
                    if (CommentOther != null)
                    hashCode = hashCode * 59 + CommentOther.GetHashCode();
                    if (CommentCostCenter != null)
                    hashCode = hashCode * 59 + CommentCostCenter.GetHashCode();
                    if (CommentPlant != null)
                    hashCode = hashCode * 59 + CommentPlant.GetHashCode();
                    if (CommentLocation != null)
                    hashCode = hashCode * 59 + CommentLocation.GetHashCode();
                    if (Asset != null)
                    hashCode = hashCode * 59 + Asset.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InventoryOrderAssetResource left, InventoryOrderAssetResource right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InventoryOrderAssetResource left, InventoryOrderAssetResource right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
