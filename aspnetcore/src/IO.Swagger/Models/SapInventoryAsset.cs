/*
 * Digitalization of Asset Counting Web Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SapInventoryAsset : IEquatable<SapInventoryAsset>
    { 
        /// <summary>
        /// Gets or Sets InventoryNumber
        /// </summary>
        [DataMember(Name="inventoryNumber")]
        public string InventoryNumber { get; set; }

        /// <summary>
        /// Gets or Sets SerialNumber
        /// </summary>
        [DataMember(Name="serialNumber")]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location")]
        public string Location { get; set; }

        /// <summary>
        /// Gets or Sets Room
        /// </summary>
        [DataMember(Name="room")]
        public string Room { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets CostCenter
        /// </summary>
        [DataMember(Name="costCenter")]
        public string CostCenter { get; set; }

        /// <summary>
        /// Gets or Sets CapitalisationDate
        /// </summary>
        [DataMember(Name="capitalisationDate")]
        public DateTime? CapitalisationDate { get; set; }

        /// <summary>
        /// Gets or Sets LastInventoryDate
        /// </summary>
        [DataMember(Name="lastInventoryDate")]
        public DateTime? LastInventoryDate { get; set; }

        /// <summary>
        /// Gets or Sets AcquisitionValue
        /// </summary>
        [DataMember(Name="acquisitionValue")]
        public double? AcquisitionValue { get; set; }

        /// <summary>
        /// Gets or Sets AssetSuperNumber
        /// </summary>
        [DataMember(Name="assetSuperNumber")]
        public string AssetSuperNumber { get; set; }

        /// <summary>
        /// Gets or Sets Vendor
        /// </summary>
        [DataMember(Name="vendor")]
        public string Vendor { get; set; }

        /// <summary>
        /// Gets or Sets TypeName
        /// </summary>
        [DataMember(Name="typeName")]
        public string TypeName { get; set; }

        /// <summary>
        /// Gets or Sets Plant
        /// </summary>
        [DataMember(Name="plant")]
        public string Plant { get; set; }

        /// <summary>
        /// Gets or Sets AssetClass
        /// </summary>
        [DataMember(Name="assetClass")]
        public string AssetClass { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="quantity")]
        public double? Quantity { get; set; }

        /// <summary>
        /// Gets or Sets Unit
        /// </summary>
        [DataMember(Name="unit")]
        public string Unit { get; set; }

        /// <summary>
        /// Gets or Sets DeactivatedOn
        /// </summary>
        [DataMember(Name="deactivatedOn")]
        public DateTime? DeactivatedOn { get; set; }

        /// <summary>
        /// Gets or Sets IsDeactivated
        /// </summary>
        [DataMember(Name="isDeactivated")]
        public bool? IsDeactivated { get; set; }

        /// <summary>
        /// Gets or Sets CompanyCodeCurrency
        /// </summary>
        [DataMember(Name="companyCodeCurrency")]
        public string CompanyCodeCurrency { get; set; }

        /// <summary>
        /// Gets or Sets AssetNumber
        /// </summary>
        [Required]
        [DataMember(Name="assetNumber")]
        public string AssetNumber { get; set; }

        /// <summary>
        /// Gets or Sets SubNumber
        /// </summary>
        [Required]
        [DataMember(Name="subNumber")]
        public string SubNumber { get; set; }

        /// <summary>
        /// Gets or Sets CompanyCode
        /// </summary>
        [Required]
        [DataMember(Name="companyCode")]
        public string CompanyCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SapInventoryAsset {\n");
            sb.Append("  InventoryNumber: ").Append(InventoryNumber).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Room: ").Append(Room).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CostCenter: ").Append(CostCenter).Append("\n");
            sb.Append("  CapitalisationDate: ").Append(CapitalisationDate).Append("\n");
            sb.Append("  LastInventoryDate: ").Append(LastInventoryDate).Append("\n");
            sb.Append("  AcquisitionValue: ").Append(AcquisitionValue).Append("\n");
            sb.Append("  AssetSuperNumber: ").Append(AssetSuperNumber).Append("\n");
            sb.Append("  Vendor: ").Append(Vendor).Append("\n");
            sb.Append("  TypeName: ").Append(TypeName).Append("\n");
            sb.Append("  Plant: ").Append(Plant).Append("\n");
            sb.Append("  AssetClass: ").Append(AssetClass).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  DeactivatedOn: ").Append(DeactivatedOn).Append("\n");
            sb.Append("  IsDeactivated: ").Append(IsDeactivated).Append("\n");
            sb.Append("  CompanyCodeCurrency: ").Append(CompanyCodeCurrency).Append("\n");
            sb.Append("  AssetNumber: ").Append(AssetNumber).Append("\n");
            sb.Append("  SubNumber: ").Append(SubNumber).Append("\n");
            sb.Append("  CompanyCode: ").Append(CompanyCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SapInventoryAsset)obj);
        }

        /// <summary>
        /// Returns true if SapInventoryAsset instances are equal
        /// </summary>
        /// <param name="other">Instance of SapInventoryAsset to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SapInventoryAsset other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    InventoryNumber == other.InventoryNumber ||
                    InventoryNumber != null &&
                    InventoryNumber.Equals(other.InventoryNumber)
                ) && 
                (
                    SerialNumber == other.SerialNumber ||
                    SerialNumber != null &&
                    SerialNumber.Equals(other.SerialNumber)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.Equals(other.Location)
                ) && 
                (
                    Room == other.Room ||
                    Room != null &&
                    Room.Equals(other.Room)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    CostCenter == other.CostCenter ||
                    CostCenter != null &&
                    CostCenter.Equals(other.CostCenter)
                ) && 
                (
                    CapitalisationDate == other.CapitalisationDate ||
                    CapitalisationDate != null &&
                    CapitalisationDate.Equals(other.CapitalisationDate)
                ) && 
                (
                    LastInventoryDate == other.LastInventoryDate ||
                    LastInventoryDate != null &&
                    LastInventoryDate.Equals(other.LastInventoryDate)
                ) && 
                (
                    AcquisitionValue == other.AcquisitionValue ||
                    AcquisitionValue != null &&
                    AcquisitionValue.Equals(other.AcquisitionValue)
                ) && 
                (
                    AssetSuperNumber == other.AssetSuperNumber ||
                    AssetSuperNumber != null &&
                    AssetSuperNumber.Equals(other.AssetSuperNumber)
                ) && 
                (
                    Vendor == other.Vendor ||
                    Vendor != null &&
                    Vendor.Equals(other.Vendor)
                ) && 
                (
                    TypeName == other.TypeName ||
                    TypeName != null &&
                    TypeName.Equals(other.TypeName)
                ) && 
                (
                    Plant == other.Plant ||
                    Plant != null &&
                    Plant.Equals(other.Plant)
                ) && 
                (
                    AssetClass == other.AssetClass ||
                    AssetClass != null &&
                    AssetClass.Equals(other.AssetClass)
                ) && 
                (
                    Quantity == other.Quantity ||
                    Quantity != null &&
                    Quantity.Equals(other.Quantity)
                ) && 
                (
                    Unit == other.Unit ||
                    Unit != null &&
                    Unit.Equals(other.Unit)
                ) && 
                (
                    DeactivatedOn == other.DeactivatedOn ||
                    DeactivatedOn != null &&
                    DeactivatedOn.Equals(other.DeactivatedOn)
                ) && 
                (
                    IsDeactivated == other.IsDeactivated ||
                    IsDeactivated != null &&
                    IsDeactivated.Equals(other.IsDeactivated)
                ) && 
                (
                    CompanyCodeCurrency == other.CompanyCodeCurrency ||
                    CompanyCodeCurrency != null &&
                    CompanyCodeCurrency.Equals(other.CompanyCodeCurrency)
                ) && 
                (
                    AssetNumber == other.AssetNumber ||
                    AssetNumber != null &&
                    AssetNumber.Equals(other.AssetNumber)
                ) && 
                (
                    SubNumber == other.SubNumber ||
                    SubNumber != null &&
                    SubNumber.Equals(other.SubNumber)
                ) && 
                (
                    CompanyCode == other.CompanyCode ||
                    CompanyCode != null &&
                    CompanyCode.Equals(other.CompanyCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (InventoryNumber != null)
                    hashCode = hashCode * 59 + InventoryNumber.GetHashCode();
                    if (SerialNumber != null)
                    hashCode = hashCode * 59 + SerialNumber.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                    if (Room != null)
                    hashCode = hashCode * 59 + Room.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (CostCenter != null)
                    hashCode = hashCode * 59 + CostCenter.GetHashCode();
                    if (CapitalisationDate != null)
                    hashCode = hashCode * 59 + CapitalisationDate.GetHashCode();
                    if (LastInventoryDate != null)
                    hashCode = hashCode * 59 + LastInventoryDate.GetHashCode();
                    if (AcquisitionValue != null)
                    hashCode = hashCode * 59 + AcquisitionValue.GetHashCode();
                    if (AssetSuperNumber != null)
                    hashCode = hashCode * 59 + AssetSuperNumber.GetHashCode();
                    if (Vendor != null)
                    hashCode = hashCode * 59 + Vendor.GetHashCode();
                    if (TypeName != null)
                    hashCode = hashCode * 59 + TypeName.GetHashCode();
                    if (Plant != null)
                    hashCode = hashCode * 59 + Plant.GetHashCode();
                    if (AssetClass != null)
                    hashCode = hashCode * 59 + AssetClass.GetHashCode();
                    if (Quantity != null)
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                    if (Unit != null)
                    hashCode = hashCode * 59 + Unit.GetHashCode();
                    if (DeactivatedOn != null)
                    hashCode = hashCode * 59 + DeactivatedOn.GetHashCode();
                    if (IsDeactivated != null)
                    hashCode = hashCode * 59 + IsDeactivated.GetHashCode();
                    if (CompanyCodeCurrency != null)
                    hashCode = hashCode * 59 + CompanyCodeCurrency.GetHashCode();
                    if (AssetNumber != null)
                    hashCode = hashCode * 59 + AssetNumber.GetHashCode();
                    if (SubNumber != null)
                    hashCode = hashCode * 59 + SubNumber.GetHashCode();
                    if (CompanyCode != null)
                    hashCode = hashCode * 59 + CompanyCode.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SapInventoryAsset left, SapInventoryAsset right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SapInventoryAsset left, SapInventoryAsset right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
