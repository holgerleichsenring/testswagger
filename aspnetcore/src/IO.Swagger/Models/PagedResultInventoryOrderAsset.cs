/*
 * Digitalization of Asset Counting Web Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PagedResultInventoryOrderAsset : IEquatable<PagedResultInventoryOrderAsset>
    { 
        /// <summary>
        /// Gets or Sets Results
        /// </summary>
        [DataMember(Name="results")]
        public List<InventoryOrderAsset> Results { get; set; }

        /// <summary>
        /// Gets or Sets CurrentPage
        /// </summary>
        [DataMember(Name="currentPage")]
        public int? CurrentPage { get; set; }

        /// <summary>
        /// Gets or Sets PageCount
        /// </summary>
        [DataMember(Name="pageCount")]
        public int? PageCount { get; set; }

        /// <summary>
        /// Gets or Sets PageSize
        /// </summary>
        [DataMember(Name="pageSize")]
        public int? PageSize { get; set; }

        /// <summary>
        /// Gets or Sets RowCount
        /// </summary>
        [DataMember(Name="rowCount")]
        public int? RowCount { get; set; }

        /// <summary>
        /// Gets or Sets FirstRowOnPage
        /// </summary>
        [DataMember(Name="firstRowOnPage")]
        public int? FirstRowOnPage { get; private set; }

        /// <summary>
        /// Gets or Sets LastRowOnPage
        /// </summary>
        [DataMember(Name="lastRowOnPage")]
        public int? LastRowOnPage { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PagedResultInventoryOrderAsset {\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("  CurrentPage: ").Append(CurrentPage).Append("\n");
            sb.Append("  PageCount: ").Append(PageCount).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("  RowCount: ").Append(RowCount).Append("\n");
            sb.Append("  FirstRowOnPage: ").Append(FirstRowOnPage).Append("\n");
            sb.Append("  LastRowOnPage: ").Append(LastRowOnPage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PagedResultInventoryOrderAsset)obj);
        }

        /// <summary>
        /// Returns true if PagedResultInventoryOrderAsset instances are equal
        /// </summary>
        /// <param name="other">Instance of PagedResultInventoryOrderAsset to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PagedResultInventoryOrderAsset other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Results == other.Results ||
                    Results != null &&
                    Results.SequenceEqual(other.Results)
                ) && 
                (
                    CurrentPage == other.CurrentPage ||
                    CurrentPage != null &&
                    CurrentPage.Equals(other.CurrentPage)
                ) && 
                (
                    PageCount == other.PageCount ||
                    PageCount != null &&
                    PageCount.Equals(other.PageCount)
                ) && 
                (
                    PageSize == other.PageSize ||
                    PageSize != null &&
                    PageSize.Equals(other.PageSize)
                ) && 
                (
                    RowCount == other.RowCount ||
                    RowCount != null &&
                    RowCount.Equals(other.RowCount)
                ) && 
                (
                    FirstRowOnPage == other.FirstRowOnPage ||
                    FirstRowOnPage != null &&
                    FirstRowOnPage.Equals(other.FirstRowOnPage)
                ) && 
                (
                    LastRowOnPage == other.LastRowOnPage ||
                    LastRowOnPage != null &&
                    LastRowOnPage.Equals(other.LastRowOnPage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Results != null)
                    hashCode = hashCode * 59 + Results.GetHashCode();
                    if (CurrentPage != null)
                    hashCode = hashCode * 59 + CurrentPage.GetHashCode();
                    if (PageCount != null)
                    hashCode = hashCode * 59 + PageCount.GetHashCode();
                    if (PageSize != null)
                    hashCode = hashCode * 59 + PageSize.GetHashCode();
                    if (RowCount != null)
                    hashCode = hashCode * 59 + RowCount.GetHashCode();
                    if (FirstRowOnPage != null)
                    hashCode = hashCode * 59 + FirstRowOnPage.GetHashCode();
                    if (LastRowOnPage != null)
                    hashCode = hashCode * 59 + LastRowOnPage.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PagedResultInventoryOrderAsset left, PagedResultInventoryOrderAsset right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PagedResultInventoryOrderAsset left, PagedResultInventoryOrderAsset right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
