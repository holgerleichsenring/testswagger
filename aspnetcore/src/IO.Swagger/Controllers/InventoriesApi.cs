/*
 * Digitalization of Asset Counting Web Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class InventoriesApiController : ControllerBase
    { 
        /// <summary>
        /// Deletes an InventoryOrder instance.
        /// </summary>
        
        /// <param name="id">The inventoryOrder id to be deleted.</param>
        /// <response code="204">Success</response>
        [HttpDelete]
        [Route("/api/inventories/{id}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("Delete")]
        public virtual IActionResult Delete([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Deletes InventoryOrder instances.
        /// </summary>
        
        /// <param name="ids">The inventoryOrder ids to be deleted.</param>
        /// <response code="204">Success</response>
        [HttpDelete]
        [Route("/api/inventories/bulk")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("Delete_0")]
        public virtual IActionResult Delete_0([FromQuery]List<int?> ids)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns list of InventoryOrders. This query can be paged. If page and pageSize are omitted,  the full list is going to be returned. When pageSize and page specified,  pageCount and currentPage will be returned on first call.
        /// </summary>
        
        /// <param name="page">define the page that this query will return</param>
        /// <param name="pageSize">define the number of items each page will contain if records are available</param>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/api/inventories")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("Get")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<InventoryOrder>), description: "Success")]
        public virtual IActionResult Get([FromQuery]int? page, [FromQuery]int? pageSize)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<InventoryOrder>));

            string exampleJson = null;
            exampleJson = "[ {\n  \"creator\" : \"creator\",\n  \"reportDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"hasOnlyUntaggedAssets\" : true,\n  \"inventoryVariantName\" : \"inventoryVariantName\",\n  \"description\" : \"description\",\n  \"assignees\" : [ {\n    \"id\" : \"id\",\n    \"assignee\" : \"assignee\",\n    \"inventoryOrderId\" : 6\n  }, {\n    \"id\" : \"id\",\n    \"assignee\" : \"assignee\",\n    \"inventoryOrderId\" : 6\n  } ],\n  \"id\" : 0,\n  \"status\" : 1\n}, {\n  \"creator\" : \"creator\",\n  \"reportDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"hasOnlyUntaggedAssets\" : true,\n  \"inventoryVariantName\" : \"inventoryVariantName\",\n  \"description\" : \"description\",\n  \"assignees\" : [ {\n    \"id\" : \"id\",\n    \"assignee\" : \"assignee\",\n    \"inventoryOrderId\" : 6\n  }, {\n    \"id\" : \"id\",\n    \"assignee\" : \"assignee\",\n    \"inventoryOrderId\" : 6\n  } ],\n  \"id\" : 0,\n  \"status\" : 1\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<InventoryOrder>>(exampleJson)
            : default(List<InventoryOrder>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the InventoryOrder specified by id.
        /// </summary>
        
        /// <param name="id">the id of the inventoryOrder to be retrieved</param>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/api/inventories/{id}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("Get_0")]
        [SwaggerResponse(statusCode: 200, type: typeof(InventoryOrder), description: "Success")]
        public virtual IActionResult Get_0([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InventoryOrder));

            string exampleJson = null;
            exampleJson = "{\n  \"creator\" : \"creator\",\n  \"reportDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"hasOnlyUntaggedAssets\" : true,\n  \"inventoryVariantName\" : \"inventoryVariantName\",\n  \"description\" : \"description\",\n  \"assignees\" : [ {\n    \"id\" : \"id\",\n    \"assignee\" : \"assignee\",\n    \"inventoryOrderId\" : 6\n  }, {\n    \"id\" : \"id\",\n    \"assignee\" : \"assignee\",\n    \"inventoryOrderId\" : 6\n  } ],\n  \"id\" : 0,\n  \"status\" : 1\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<InventoryOrder>(exampleJson)
            : default(InventoryOrder);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates an InventoryOrder instance.
        /// </summary>
        
        /// <param name="inventoryOrder">The inventoryOrder object to be updated.</param>
        /// <response code="200">Success</response>
        [HttpPost]
        [Route("/api/inventories")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("Post")]
        public virtual IActionResult Post([FromBody]InventoryOrder inventoryOrder)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Updates InventoryOrder instances.
        /// </summary>
        
        /// <param name="inventoryOrders">The inventoryOrders to be updated.</param>
        /// <response code="200">Success</response>
        [HttpPost]
        [Route("/api/inventories/bulk")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("Post_0")]
        public virtual IActionResult Post_0([FromBody]List<InventoryOrder> inventoryOrders)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Creates an InventoryOrder instance.
        /// </summary>
        
        /// <param name="inventoryOrderCreation">Defines the inventory order to be created and the inventory variant that is used to populate assets.</param>
        /// <response code="200">Success</response>
        [HttpPut]
        [Route("/api/inventories")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("Put")]
        public virtual IActionResult Put([FromBody]InventoryOrderCreation inventoryOrderCreation)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);


            throw new NotImplementedException();
        }
    }
}
